name: Secure CI/CD Pipeline

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:

  # 1. CI Security Checks
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.19.0'

      - name: Install dependencies
        run: npm install

      - name: Enforce code reviews (Only on pull request)
        if: github.event_name == 'pull_request'
        uses: hmarr/auto-approve-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Enforce signed commits
        run: |
          git log ${{ github.event.before }}..${{ github.sha }} --pretty=format:'%h %G? %an' | while read line; do
            commit_hash=$(echo $line | cut -d ' ' -f 1)
            commit_status=$(echo $line | cut -d ' ' -f 2)
            if [[ "$commit_status" != "G" ]]; then
              echo "❌ Commit $commit_hash is not signed"
              exit 1
            fi
          done

  # 2. Role-based Access Control
  access_control:
    runs-on: ubuntu-latest
    steps:
      - name: Check role-based access control
        run: |
          if [[ "$(curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -s "https://api.github.com/repos/${{ github.repository }}/collaborators" | jq '.[] | select(.permissions.push == true)' | wc -l)" -lt 1 ]]; then
            echo "❌ Role-based access is not configured properly."
            exit 1
          fi

  # 3. SAST Tools: Bandit + TruffleHog
  sast_analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install tools
        run: pip install bandit trufflehog jq

      - name: Secrets Scanning (TruffleHog)
        run: |
          trufflehog --json . > secrets_scan_results.json || true
          if [[ $(jq length secrets_scan_results.json) -gt 0 ]]; then
            echo "❌ Secrets found!"
            cat secrets_scan_results.json
            exit 1
          else
            echo "✅ No secrets found."
          fi

      - name: Upload TruffleHog Report
        uses: actions/upload-artifact@v4
        with:
          name: secrets-scan
          path: secrets_scan_results.json

      - name: SQL Injection Detection (Bandit)
        run: |
          bandit -r . -f json -o bandit_report.json -t B107
          if grep -q "issue" bandit_report.json; then
            echo "❌ SQL Injection issues found!"
            cat bandit_report.json
            exit 1
          fi

      - name: Upload Bandit Report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit_report.json

  # 4. DAST Tools: SQLMap + OWASP ZAP
  dast_scan:
    runs-on: ubuntu-latest
    services:
      juice-shop:
        image: bkimminich/juice-shop
        ports:
          - 3000:3000
        options: --health-cmd="curl --silent --fail localhost:3000 || exit 1" --health-timeout=30s --health-start-period=30s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install tools
        run: |
          pip install sqlmap
          sudo apt-get update
          sudo apt-get install -y openjdk-11-jre
          wget https://github.com/zaproxy/zaproxy/releases/download/v2.16.1/ZAP_2.16.1_Linux.tar.gz
          tar -xzf ZAP_2.16.1_Linux.tar.gz
          sudo mv ZAP_2.16.1 /opt/zaproxy
          sudo ln -s /opt/zaproxy/zap.sh /usr/local/bin/zap

      - name: Run SQLMap for SQLi
        run: sqlmap -u "http://localhost:3000" --batch --risk=3 --level=5

      - name: Run OWASP ZAP for XSS
        run: zap -cmd -quickurl http://localhost:3000 -quickout zap_report.html

      - name: Upload ZAP Report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap_report.html

  # 5. SCA Tool: Snyk
  sca_scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.19.0'

      - name: Install dependencies
        run: npm install

      - name: Scan for vulnerable packages (Snyk)
        uses: snyk/actions/node@master
        with:
          args: test --severity-threshold=medium
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Use signed libraries verification
        run: bash scripts/verify-signatures.sh

  # 6. Audit Logging
  audit_log:
    runs-on: ubuntu-latest
    steps:
      - name: Log pipeline run
        run: |
          echo "$(date) - CI/CD pipeline executed for repo: ${{ github.repository }}" >> ./audit_log.txt
          cat ./audit_log.txt

      - name: Upload Audit Log
        uses: actions/upload-artifact@v4
        with:
          name: audit-log
          path: audit_log.txt
